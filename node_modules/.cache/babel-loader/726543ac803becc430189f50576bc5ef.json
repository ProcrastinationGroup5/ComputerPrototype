{"ast":null,"code":"var _jsxFileName = \"/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/TaskDetails/TaskDetails.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { displayTaskInfoFlip, addNewSubtask, completeSubtask, completeTask } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.editTasks.tasksVar,\n    tasksLength: state.editTasks.tasksLength,\n    selectedTask: state.setTaskSelected.taskSelectedVar\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    displayTaskInfoFlip: bool => dispatch(displayTaskInfoFlip(bool)),\n    addNewSubtask: array => dispatch(addNewSubtask(array)),\n    completeSubtask: array => dispatch(completeSubtask(array)),\n    completeTask: str => dispatch(completeTask(str))\n  };\n};\n\nclass TaskDetails extends Component {\n  constructor() {\n    super();\n\n    this.bgColor = index => {\n      if (this.state.selectedTaskDetailRow === '') {\n        return 'white';\n      }\n\n      if (this.state.selectedTaskDetailRow === index) {\n        return '#d1d1d1';\n      } else {\n        return 'white';\n      }\n    };\n\n    this.handleChange = index => {\n      if (this.state.selectedTaskDetailRow !== index) {\n        this.setState({\n          selectedTaskDetailRow: index\n        });\n      } else {\n        this.setState({\n          selectedTaskDetailRow: ''\n        });\n      }\n    };\n\n    this.handleAdditionalSubtaskChange = (i, event) => {\n      const newAdditionalSubtasks = this.state.additionalSubtasks.slice();\n      newAdditionalSubtasks[i] = event.target.value;\n      this.setState({\n        additionalSubtasks: newAdditionalSubtasks,\n        selectedTaskDetailRow: ''\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.additionalSubtaskButtonPressed) {\n        window.alert('Please add subtasks before pressing Submit');\n      } else {\n        this.props.addNewSubtask({\n          index: this.props.selectedTask,\n          items: this.state.additionalSubtasks\n        });\n        this.setState({\n          selectedTaskDetailRow: '',\n          numberAdditionalSubtasks: 0\n        });\n        this.props.displayTaskInfoFlip(false);\n      }\n    };\n\n    this.handleComplete = () => {\n      this.props.completeSubtask({\n        index: this.props.selectedTask,\n        item: this.props.tasks[this.props.selectedTask].subtasks[this.state.selectedTaskDetailRow]\n      });\n    };\n\n    this.renderCompleteButton = () => {\n      if (this.state.selectedTaskDetailRow !== '') {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(Button, {\n          size: \"small\",\n          onClick: () => {\n            this.handleComplete();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"Completed\"));\n      }\n    };\n\n    this.handleTaskComplete = () => {\n      console.log('handle task complete triggered');\n      this.props.completeTask(this.props.tasks[this.props.selectedTask].name);\n    };\n\n    this.state = {\n      selectedTaskDetailRow: '',\n      numberAdditionalSubtasks: 0,\n      additionalSubtasks: new Array(this.numberAdditionalSubtasks),\n      additionalSubtaskButtonPressed: false\n    };\n  }\n\n  render() {\n    const subTaskInputs = [];\n\n    for (let i = 0; i < this.state.numberAdditionalSubtasks; i++) {\n      subTaskInputs.push(React.createElement(\"input\", {\n        type: \"text\",\n        className: \"addInputSubtask\",\n        onChange: event => this.handleAdditionalSubtaskChange(i, event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"taskDetailsInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.props.tasks[this.props.selectedTask].name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Due Date: \", this.props.tasks[this.props.selectedTask].date), React.createElement(Button, {\n      size: \"small\",\n      onClick: () => {\n        this.handleTaskComplete();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Completed\"), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.props.tasks[this.props.selectedTask].subtasks.map((subtask, index) => React.createElement(TableRow, {\n      key: index,\n      onClick: event => this.handleChange(index),\n      style: {\n        backgroundColor: this.bgColor(index)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, subtask)))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, subTaskInputs), React.createElement(Button, {\n      size: \"small\",\n      onClick: () => {\n        this.setState({\n          numberAdditionalSubtasks: this.state.numberAdditionalSubtasks + 1,\n          additionalSubtaskButtonPressed: true\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Add SubTask\"), React.createElement(Button, {\n      size: \"small\",\n      onClick: () => {\n        this.handleSubmit();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Submit\"), this.renderCompleteButton());\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);","map":{"version":3,"sources":["/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/TaskDetails/TaskDetails.js"],"names":["React","Component","connect","Table","TableBody","TableCell","TableRow","Button","displayTaskInfoFlip","addNewSubtask","completeSubtask","completeTask","mapStateToProps","state","tasks","editTasks","tasksVar","tasksLength","selectedTask","setTaskSelected","taskSelectedVar","mapDispatchToProps","dispatch","bool","array","str","TaskDetails","constructor","bgColor","index","selectedTaskDetailRow","handleChange","setState","handleAdditionalSubtaskChange","i","event","newAdditionalSubtasks","additionalSubtasks","slice","target","value","handleSubmit","additionalSubtaskButtonPressed","window","alert","props","items","numberAdditionalSubtasks","handleComplete","item","subtasks","renderCompleteButton","handleTaskComplete","console","log","name","Array","render","subTaskInputs","push","date","map","subtask","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport {\n    displayTaskInfoFlip,\n    addNewSubtask,\n    completeSubtask,\n    completeTask\n} from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.editTasks.tasksVar,\n        tasksLength: state.editTasks.tasksLength,\n        selectedTask: state.setTaskSelected.taskSelectedVar\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        displayTaskInfoFlip: (bool) => dispatch(displayTaskInfoFlip(bool)),\n        addNewSubtask: (array) => dispatch(addNewSubtask(array)),\n        completeSubtask: (array) => dispatch(completeSubtask(array)),\n        completeTask: (str) => dispatch(completeTask(str))\n    }\n}\n\nclass TaskDetails extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            selectedTaskDetailRow: '',\n            numberAdditionalSubtasks: 0,\n            additionalSubtasks: new Array(this.numberAdditionalSubtasks),\n            additionalSubtaskButtonPressed: false\n        }\n    }\n\n    bgColor = (index) => {\n        if (this.state.selectedTaskDetailRow === '') {\n            return 'white';\n        }\n        if (this.state.selectedTaskDetailRow === index) {\n            return '#d1d1d1';\n        } else {\n            return 'white';\n        }\n    }\n\n    handleChange = (index) => {\n        if (this.state.selectedTaskDetailRow !== index) {\n            this.setState({\n                selectedTaskDetailRow: index\n            })\n        } else {\n            this.setState({\n                selectedTaskDetailRow: ''\n            })\n        }\n    }\n\n    handleAdditionalSubtaskChange = (i, event) => {\n\n        const newAdditionalSubtasks = this.state.additionalSubtasks.slice()\n        newAdditionalSubtasks[i] = event.target.value\n        this.setState({\n            additionalSubtasks: newAdditionalSubtasks,\n            selectedTaskDetailRow: ''\n        })\n    }\n\n    handleSubmit = () => {\n\n        if (!this.state.additionalSubtaskButtonPressed) {\n            window.alert('Please add subtasks before pressing Submit')\n        }\n\n        else {\n            this.props.addNewSubtask({\n                index: this.props.selectedTask,\n                items: this.state.additionalSubtasks\n            })\n\n            this.setState({\n                selectedTaskDetailRow: '',\n                numberAdditionalSubtasks: 0,\n            })\n\n            this.props.displayTaskInfoFlip(false);\n        }\n\n    }\n\n    handleComplete = () => {\n        this.props.completeSubtask({\n            index: this.props.selectedTask,\n            item: this.props.tasks[this.props.selectedTask].subtasks[this.state.selectedTaskDetailRow]\n        })\n    }\n\n    renderCompleteButton = () => {\n        if (this.state.selectedTaskDetailRow !== '') {\n            return (\n                <div><Button size='small' onClick={() => { this.handleComplete() }}>\n                    Completed\n            </Button></div>\n            )\n        }\n    }\n\n    handleTaskComplete = () => {\n        console.log('handle task complete triggered')\n        this.props.completeTask(\n            this.props.tasks[this.props.selectedTask].name\n        )\n    }\n\n    render() {\n\n        const subTaskInputs = [];\n\n        for (let i = 0; i < this.state.numberAdditionalSubtasks; i++) {\n            subTaskInputs.push(<input type=\"text\"\n                className='addInputSubtask'\n                onChange={(event) => this.handleAdditionalSubtaskChange(i, event)}\n            />)\n        }\n\n        return (\n            <div>\n                <div className='taskDetailsInfo'>\n                    <h1>{this.props.tasks[this.props.selectedTask].name}</h1>\n                    <h2>Due Date: {this.props.tasks[this.props.selectedTask].date}</h2>\n                    <Button size='small' onClick={() => { this.handleTaskComplete() }}>\n                        Completed\n                    </Button>\n                    <Table>\n                        <TableBody>\n                            {this.props.tasks[this.props.selectedTask].subtasks.map((subtask, index) => (\n                                <TableRow key={index} onClick={event => this.handleChange(index)} style={{ backgroundColor: this.bgColor(index) }}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {subtask}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n                <div>\n                    {subTaskInputs}\n                </div>\n                <Button size='small' onClick={() => {\n                    this.setState({\n                        numberAdditionalSubtasks: this.state.numberAdditionalSubtasks + 1,\n                        additionalSubtaskButtonPressed: true\n                    })\n                }}>\n                    Add SubTask\n                </Button>\n\n                <Button size='small' onClick={() => { this.handleSubmit() }}>\n                    Submit\n                </Button>\n\n                {this.renderCompleteButton()}\n\n            </div>\n\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails)"]},"metadata":{},"sourceType":"module"}