{"ast":null,"code":"var _jsxFileName = \"/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/Visualisation/Visualisation.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Rectangle, Circle, Ellipse, Line, Polyline, CornerBox, Triangle } from 'react-shapes';\n\nconst mapStateToProps = state => {\n  console.log('iterative visualisation receives new props from redux state');\n  console.log(this.state.tasks);\n  return {\n    tasks: state.editTasks.tasksVar\n  };\n};\n\nclass Visualisation extends Component {\n  constructor() {\n    super();\n\n    this.iterativeTaskVisualiation = () => {\n      for (let i = 0; i < this.state.tasks.length; i++) {\n        return React.createElement(Circle, {\n          r: 50,\n          fill: {\n            color: '#2409ba'\n          },\n          stroke: {\n            color: '#E65243'\n          },\n          strokeWidth: 3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.state = {\n      tasks: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.tasks !== this.props.tasks) {\n      console.log('newProps');\n      this.setState({\n        tasks: this.props.tasks\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps)(Visualisation);","map":{"version":3,"sources":["/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/Visualisation/Visualisation.js"],"names":["React","Component","connect","Rectangle","Circle","Ellipse","Line","Polyline","CornerBox","Triangle","mapStateToProps","state","console","log","tasks","editTasks","tasksVar","Visualisation","constructor","iterativeTaskVisualiation","i","length","color","componentDidUpdate","prevProps","props","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,QAA3C,EAAqDC,SAArD,EAAgEC,QAAhE,QAAgF,cAAhF;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWG,KAAvB;AACA,SAAO;AACHA,IAAAA,KAAK,EAAEH,KAAK,CAACI,SAAN,CAAgBC;AADpB,GAAP;AAGH,CAND;;AAQA,MAAMC,aAAN,SAA4BhB,SAA5B,CAAsC;AAElCiB,EAAAA,WAAW,GAAE;AACT;;AADS,SAObC,yBAPa,GAOe,MAAM;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWG,KAAX,CAAiBO,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,eACI,oBAAC,MAAD;AAAQ,UAAA,CAAC,EAAE,EAAX;AAAe,UAAA,IAAI,EAAE;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB;AAA2C,UAAA,MAAM,EAAE;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAAnD;AAAyE,UAAA,WAAW,EAAE,CAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AACJ,KAbY;;AAET,SAAKX,KAAL,GAAa;AACTG,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAUDS,EAAAA,kBAAkB,CAACC,SAAD,EAAW;AACzB,QAAIA,SAAS,CAACV,KAAV,KAAkB,KAAKW,KAAL,CAAWX,KAAjC,EAAuC;AACnCF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAKa,QAAL,CAAc;AAACZ,QAAAA,KAAK,EAAC,KAAKW,KAAL,CAAWX;AAAlB,OAAd;AACH;AACJ;;AAEDa,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AA7BiC;;AAgCtC,eAAezB,OAAO,CAACQ,eAAD,CAAP,CAAyBO,aAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Rectangle, Circle, Ellipse, Line, Polyline, CornerBox, Triangle } from 'react-shapes';\n\nconst mapStateToProps = state => {\n    console.log('iterative visualisation receives new props from redux state')\n    console.log(this.state.tasks)\n    return {\n        tasks: state.editTasks.tasksVar\n    }\n}\n\nclass Visualisation extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            tasks: []\n        }\n    }\n\n    iterativeTaskVisualiation = () => {\n        for (let i = 0; i < this.state.tasks.length; i++) {\n            return (\n                <Circle r={50} fill={{ color: '#2409ba' }} stroke={{ color: '#E65243' }} strokeWidth={3} />\n            )\n        }\n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.tasks!==this.props.tasks){\n            console.log('newProps')\n            this.setState({tasks:this.props.tasks})\n        }\n    }\n\n    render() {\n        return (\n            <div>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Visualisation)"]},"metadata":{},"sourceType":"module"}