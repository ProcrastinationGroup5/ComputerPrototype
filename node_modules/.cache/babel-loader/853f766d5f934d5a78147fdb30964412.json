{"ast":null,"code":"var _jsxFileName = \"/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/AdminConsole/EditDetails/ActionButtons.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { removeTypeSelect, removeMarketSelect, removeLanguageSelect, addTypeSelect, addMarketSelect, addLanguageSelect, editLanguageSelect, editMarketSelect, editTypeSelect } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    typeOptionsVar: state.typeOptionsData.typeOptionsVar,\n    marketOptionsVar: state.marketOptionsData.marketOptionsVar,\n    languageOptionsVar: state.languageOptionsData.languageOptionsVar\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeTypeSelect: key => dispatch(removeTypeSelect(key)),\n    removeMarketSelect: key => dispatch(removeMarketSelect(key)),\n    removeLanguageSelect: key => dispatch(removeLanguageSelect(key)),\n    addTypeSelect: option => dispatch(addTypeSelect(option)),\n    addMarketSelect: option => dispatch(addMarketSelect(option)),\n    addLanguageSelect: option => dispatch(addLanguageSelect(option)),\n    editTypeSelect: option => dispatch(editTypeSelect(option)),\n    editMarketSelect: option => dispatch(editMarketSelect(option)),\n    editLanguageSelect: option => dispatch(editLanguageSelect(option))\n  };\n};\n\nclass ActionButtons extends Component {\n  constructor() {\n    super();\n    this.newData = {\n      key: '',\n      value: '',\n      text: ''\n    };\n\n    this.handleValueChange = event => {\n      this.newData.value = event.target.value;\n      this.setState({\n        resetValueBool: false\n      });\n    };\n\n    this.handleTextChange = event => {\n      this.newData.text = event.target.value;\n      this.setState({\n        resetTextBool: false\n      });\n    };\n\n    this.handleDeleteSubmit = () => {\n      if (this.props.selectedFieldRow === 0) {\n        if (window.confirm('Are you sure you want to delete ' + this.props.marketOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.marketOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n          this.props.removeMarketSelect(this.props.selectedEditorRow);\n          this.props.setFieldRowSelected('');\n          this.props.setActionRowSelected('');\n          this.props.setEditorRowSelected('');\n          window.alert('Successfully deleted!');\n        }\n      } else if (this.props.selectedFieldRow === 1) {\n        if (window.confirm('Are you sure you want to delete ' + this.props.typeOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.typeOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n          this.props.removeTypeSelect(this.props.selectedEditorRow);\n          this.props.setFieldRowSelected('');\n          this.props.setActionRowSelected('');\n          this.props.setEditorRowSelected('');\n          window.alert('Successfully deleted!');\n        }\n      } else if (this.props.selectedFieldRow === 2) {\n        if (window.confirm('Are you sure you want to delete ' + this.props.languageOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.languageOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n          this.props.removeLanguageSelect(this.props.selectedEditorRow);\n          this.props.setFieldRowSelected('');\n          this.props.setActionRowSelected('');\n          this.props.setEditorRowSelected('');\n          window.alert('Successfully deleted!');\n        }\n      } else {\n        window.alert('Select all necessary fields!');\n      }\n    };\n\n    this.hasLowerCase = string => {\n      return /[a-z]/.test(string);\n    };\n\n    this.handleAddSubmit = () => {\n      if (this.state.resetTextBool === true || this.state.resetValueBool === true) {\n        return window.alert('Please fill in all required fields.');\n      }\n\n      if (this.newData.value.includes(' ')) {\n        return window.alert('Please remove spaces from your key');\n      }\n\n      if (this.hasLowerCase(this.newData.value)) {\n        return window.alert('Please format the key as ALLCAPS');\n      }\n\n      if (this.props.selectedFieldRow === 1 && this.hasLowerCase(this.newData.text)) {\n        return window.alert('Please format the type as ALLCAPS');\n      }\n\n      if (this.props.selectedFieldRow === 0) {\n        this.newData.key = this.props.marketOptionsVar.length;\n      } else if (this.props.selectedFieldRow === 1) {\n        this.newData.key = this.props.typeOptionsVar.length;\n      } else if (this.props.selectedFieldRow === 2) {\n        this.newData.key = this.props.languageOptionsVar.length;\n      }\n\n      if (window.confirm('Press OK to Add: ' + this.newData.value + ' ' + this.newData.text)) {\n        window.alert('Successfully added!');\n      }\n\n      if (this.props.selectedFieldRow === 0) {\n        this.props.addMarketSelect(this.newData);\n      } else if (this.props.selectedFieldRow === 1) {\n        this.props.addTypeSelect(this.newData);\n      } else if (this.props.selectedFieldRow === 2) {\n        this.props.addLanguageSelect(this.newData);\n      }\n\n      this.newData = {\n        key: '',\n        value: '',\n        text: ''\n      };\n      this.setState({\n        resetValueBool: true,\n        resetTextBool: true\n      });\n      this.props.setFieldRowSelected('');\n      this.props.setActionRowSelected('');\n      this.props.setEditorRowSelected('');\n    };\n\n    this.handleEditSubmit = () => {\n      if (this.state.resetTextBool === true || this.state.resetValueBool === true) {\n        return window.alert('Please fill in all required fields.');\n      }\n\n      if (this.props.selectedEditorRow === '') {\n        return window.alert('Please select the option you would like to edit');\n      }\n\n      if (this.newData.value.includes(' ')) {\n        return window.alert('Please remove spaces from your key');\n      }\n\n      if (this.hasLowerCase(this.newData.value) && this.props.selectedFieldRow !== 2) {\n        return window.alert('Please format the key as ALLCAPS');\n      }\n\n      if (this.props.selectedFieldRow === 1 && this.hasLowerCase(this.newData.text)) {\n        return window.alert('Please format the type as ALLCAPS');\n      }\n\n      this.newData.key = this.props.selectedEditorRow;\n\n      if (this.props.selectedFieldRow === 0) {\n        if (window.confirm('Press OK to Edit: ' + this.props.marketOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.marketOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n          window.alert('Successfully edited!');\n        }\n\n        this.props.editMarketSelect(this.newData);\n      } else if (this.props.selectedFieldRow === 1) {\n        if (window.confirm('Press OK to Edit: ' + this.props.typeOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.typeOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n          window.alert('Successfully edited!');\n        }\n\n        this.props.editTypeSelect(this.newData);\n      } else if (this.props.selectedFieldRow === 2) {\n        if (window.confirm('Press OK to Edit: ' + this.props.languageOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.languageOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n          window.alert('Successfully edited!');\n        }\n\n        this.props.editLanguageSelect(this.newData);\n      }\n\n      this.newData = {\n        key: '',\n        value: '',\n        text: ''\n      };\n      this.setState({\n        resetValueBool: true,\n        resetTextBool: true\n      });\n      this.props.setFieldRowSelected('');\n      this.props.setActionRowSelected('');\n      this.props.setEditorRowSelected('');\n    };\n\n    this.resetInput = (bool, string, onClickFunction) => {\n      if (bool === true) {\n        return React.createElement(\"input\", {\n          style: {\n            width: \"100%\",\n            fontSize: '2rem'\n          },\n          id: \"txt\",\n          value: string,\n          type: \"text\",\n          onChange: onClickFunction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"input\", {\n          style: {\n            width: \"100%\",\n            fontSize: '2rem'\n          },\n          id: \"txt\",\n          type: \"text\",\n          onChange: onClickFunction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.determineValuePrompt = () => {\n      if (this.props.selectedFieldRow === 0) {\n        return 'Market Key';\n      } else if (this.props.selectedFieldRow === 1) {\n        return 'Type Key';\n      } else {\n        return 'Language Key';\n      }\n    };\n\n    this.determineTextPrompt = () => {\n      if (this.props.selectedFieldRow === 0) {\n        return 'Market';\n      } else if (this.props.selectedFieldRow === 1) {\n        return 'Type';\n      } else {\n        return 'Language';\n      }\n    };\n\n    this.state = {\n      resetValueBool: true,\n      resetTextBool: true\n    };\n  }\n\n  render() {\n    if (this.props.selectedFieldRow === 0 || this.props.selectedFieldRow === 1 || this.props.selectedFieldRow === 2) {\n      if (this.props.selectedActionRow === 0) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }, this.resetInput(this.state.resetValueBool, this.determineValuePrompt(), this.handleValueChange), this.resetInput(this.state.resetTextBool, this.determineTextPrompt(), this.handleTextChange), React.createElement(Button, {\n          size: \"small\",\n          variant: \"outlined\",\n          style: {\n            width: '100%',\n            fontSize: '2rem'\n          },\n          onClick: () => {\n            this.handleAddSubmit();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \"Submit\"));\n      } else if (this.props.selectedActionRow === 1) {\n        if (this.props.selectedEditorRow !== '') {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }, this.resetInput(this.state.resetValueBool, this.determineValuePrompt(), this.handleValueChange), this.resetInput(this.state.resetTextBool, this.determineTextPrompt(), this.handleTextChange), React.createElement(Button, {\n            size: \"small\",\n            variant: \"outlined\",\n            style: {\n              width: '100%',\n              fontSize: '2rem'\n            },\n            onClick: () => {\n              this.handleEditSubmit();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278\n            },\n            __self: this\n          }, \"Submit\"), \"                    \");\n        } else {\n          return null;\n        }\n      } else if (this.props.selectedActionRow === 2) {\n        if (this.props.selectedEditorRow !== '') {\n          return React.createElement(Button, {\n            size: \"small\",\n            variant: \"outlined\",\n            style: {\n              width: '100%',\n              fontSize: '2rem'\n            },\n            onClick: () => {\n              this.handleDeleteSubmit();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }, \"Delete\");\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionButtons);","map":{"version":3,"sources":["/Users/vishaldhileepan/Desktop/CS330/P6 Computer Prototype/prototype1/src/AdminConsole/EditDetails/ActionButtons.js"],"names":["React","Component","Button","connect","removeTypeSelect","removeMarketSelect","removeLanguageSelect","addTypeSelect","addMarketSelect","addLanguageSelect","editLanguageSelect","editMarketSelect","editTypeSelect","mapStateToProps","state","typeOptionsVar","typeOptionsData","marketOptionsVar","marketOptionsData","languageOptionsVar","languageOptionsData","mapDispatchToProps","dispatch","key","option","ActionButtons","constructor","newData","value","text","handleValueChange","event","target","setState","resetValueBool","handleTextChange","resetTextBool","handleDeleteSubmit","props","selectedFieldRow","window","confirm","selectedEditorRow","setFieldRowSelected","setActionRowSelected","setEditorRowSelected","alert","hasLowerCase","string","test","handleAddSubmit","includes","length","handleEditSubmit","resetInput","bool","onClickFunction","width","fontSize","determineValuePrompt","determineTextPrompt","render","selectedActionRow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACIC,gBADJ,EAEIC,kBAFJ,EAGIC,oBAHJ,EAIIC,aAJJ,EAKIC,eALJ,EAMIC,iBANJ,EAOIC,kBAPJ,EAQIC,gBARJ,EASIC,cATJ,QAUO,eAVP;;AAYA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,cAAc,EAAED,KAAK,CAACE,eAAN,CAAsBD,cADnC;AAEHE,IAAAA,gBAAgB,EAAEH,KAAK,CAACI,iBAAN,CAAwBD,gBAFvC;AAGHE,IAAAA,kBAAkB,EAAEL,KAAK,CAACM,mBAAN,CAA0BD;AAH3C,GAAP;AAKH,CAND;;AAQA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHlB,IAAAA,gBAAgB,EAAGmB,GAAD,IAASD,QAAQ,CAAClB,gBAAgB,CAACmB,GAAD,CAAjB,CADhC;AAEHlB,IAAAA,kBAAkB,EAAGkB,GAAD,IAASD,QAAQ,CAACjB,kBAAkB,CAACkB,GAAD,CAAnB,CAFlC;AAGHjB,IAAAA,oBAAoB,EAAGiB,GAAD,IAASD,QAAQ,CAAChB,oBAAoB,CAACiB,GAAD,CAArB,CAHpC;AAIHhB,IAAAA,aAAa,EAAGiB,MAAD,IAAYF,QAAQ,CAACf,aAAa,CAACiB,MAAD,CAAd,CAJhC;AAKHhB,IAAAA,eAAe,EAAGgB,MAAD,IAAYF,QAAQ,CAACd,eAAe,CAACgB,MAAD,CAAhB,CALlC;AAMHf,IAAAA,iBAAiB,EAAGe,MAAD,IAAYF,QAAQ,CAACb,iBAAiB,CAACe,MAAD,CAAlB,CANpC;AAOHZ,IAAAA,cAAc,EAAGY,MAAD,IAAYF,QAAQ,CAACV,cAAc,CAACY,MAAD,CAAf,CAPjC;AAQHb,IAAAA,gBAAgB,EAAGa,MAAD,IAAYF,QAAQ,CAACX,gBAAgB,CAACa,MAAD,CAAjB,CARnC;AASHd,IAAAA,kBAAkB,EAAGc,MAAD,IAAYF,QAAQ,CAACZ,kBAAkB,CAACc,MAAD,CAAnB;AATrC,GAAP;AAWH,CAZD;;AAcA,MAAMC,aAAN,SAA4BxB,SAA5B,CAAsC;AAElCyB,EAAAA,WAAW,GAAG;AACV;AADU,SAQdC,OARc,GAQJ;AACNJ,MAAAA,GAAG,EAAE,EADC;AAENK,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,IAAI,EAAE;AAHA,KARI;;AAAA,SAedC,iBAfc,GAeOC,KAAD,IAAW;AAC3B,WAAKJ,OAAL,CAAaC,KAAb,GAAqBG,KAAK,CAACC,MAAN,CAAaJ,KAAlC;AACA,WAAKK,QAAL,CAAc;AACVC,QAAAA,cAAc,EAAE;AADN,OAAd;AAGH,KApBa;;AAAA,SAsBdC,gBAtBc,GAsBMJ,KAAD,IAAW;AAC1B,WAAKJ,OAAL,CAAaE,IAAb,GAAoBE,KAAK,CAACC,MAAN,CAAaJ,KAAjC;AACA,WAAKK,QAAL,CAAc;AACVG,QAAAA,aAAa,EAAE;AADL,OAAd;AAGH,KA3Ba;;AAAA,SA6BdC,kBA7Bc,GA6BO,MAAM;AACvB,UAAI,KAAKC,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,YAAIC,MAAM,CAACC,OAAP,CAAe,qCAAqC,KAAKH,KAAL,CAAWrB,gBAAX,CAA4B,KAAKqB,KAAL,CAAWI,iBAAvC,EAA0Dd,KAA/F,GAAuG,GAAvG,GAA6G,KAAKU,KAAL,CAAWrB,gBAAX,CAA4B,KAAKqB,KAAL,CAAWI,iBAAvC,EAA0Db,IAAvK,GAA8K,IAA7L,CAAJ,EAAwM;AACpM,eAAKS,KAAL,CAAWjC,kBAAX,CAA8B,KAAKiC,KAAL,CAAWI,iBAAzC;AACA,eAAKJ,KAAL,CAAWK,mBAAX,CAA+B,EAA/B;AACA,eAAKL,KAAL,CAAWM,oBAAX,CAAgC,EAAhC;AACA,eAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAhC;AACAL,UAAAA,MAAM,CAACM,KAAP,CAAa,uBAAb;AACH;AACJ,OARD,MASK,IAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,YAAIC,MAAM,CAACC,OAAP,CAAe,qCAAqC,KAAKH,KAAL,CAAWvB,cAAX,CAA0B,KAAKuB,KAAL,CAAWI,iBAArC,EAAwDd,KAA7F,GAAqG,GAArG,GAA2G,KAAKU,KAAL,CAAWvB,cAAX,CAA0B,KAAKuB,KAAL,CAAWI,iBAArC,EAAwDb,IAAnK,GAA0K,IAAzL,CAAJ,EAAoM;AAChM,eAAKS,KAAL,CAAWlC,gBAAX,CAA4B,KAAKkC,KAAL,CAAWI,iBAAvC;AACA,eAAKJ,KAAL,CAAWK,mBAAX,CAA+B,EAA/B;AACA,eAAKL,KAAL,CAAWM,oBAAX,CAAgC,EAAhC;AACA,eAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAhC;AACAL,UAAAA,MAAM,CAACM,KAAP,CAAa,uBAAb;AACH;AACJ,OARI,MASA,IAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,YAAIC,MAAM,CAACC,OAAP,CAAe,qCAAqC,KAAKH,KAAL,CAAWnB,kBAAX,CAA8B,KAAKmB,KAAL,CAAWI,iBAAzC,EAA4Dd,KAAjG,GAAyG,GAAzG,GAA+G,KAAKU,KAAL,CAAWnB,kBAAX,CAA8B,KAAKmB,KAAL,CAAWI,iBAAzC,EAA4Db,IAA3K,GAAkL,IAAjM,CAAJ,EAA4M;AACxM,eAAKS,KAAL,CAAWhC,oBAAX,CAAgC,KAAKgC,KAAL,CAAWI,iBAA3C;AACA,eAAKJ,KAAL,CAAWK,mBAAX,CAA+B,EAA/B;AACA,eAAKL,KAAL,CAAWM,oBAAX,CAAgC,EAAhC;AACA,eAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAhC;AACAL,UAAAA,MAAM,CAACM,KAAP,CAAa,uBAAb;AACH;AACJ,OARI,MASA;AACDN,QAAAA,MAAM,CAACM,KAAP,CAAa,8BAAb;AACH;AACJ,KA5Da;;AAAA,SA8DdC,YA9Dc,GA8DEC,MAAD,IAAY;AACvB,aAAQ,QAAQC,IAAR,CAAaD,MAAb,CAAR;AACH,KAhEa;;AAAA,SAkEdE,eAlEc,GAkEI,MAAM;AAEpB,UAAI,KAAKpC,KAAL,CAAWsB,aAAX,KAA6B,IAA7B,IAAqC,KAAKtB,KAAL,CAAWoB,cAAX,KAA8B,IAAvE,EAA6E;AACzE,eAAOM,MAAM,CAACM,KAAP,CAAa,qCAAb,CAAP;AACH;;AAED,UAAI,KAAKnB,OAAL,CAAaC,KAAb,CAAmBuB,QAAnB,CAA4B,GAA5B,CAAJ,EAAsC;AAClC,eAAOX,MAAM,CAACM,KAAP,CAAa,oCAAb,CAAP;AACH;;AAED,UAAI,KAAKC,YAAL,CAAkB,KAAKpB,OAAL,CAAaC,KAA/B,CAAJ,EAA2C;AACvC,eAAOY,MAAM,CAACM,KAAP,CAAa,kCAAb,CAAP;AACH;;AAED,UAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IAAqC,KAAKQ,YAAL,CAAkB,KAAKpB,OAAL,CAAaE,IAA/B,CAAzC,EAA+E;AAC3E,eAAOW,MAAM,CAACM,KAAP,CAAa,mCAAb,CAAP;AACH;;AAED,UAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,aAAKZ,OAAL,CAAaJ,GAAb,GAAmB,KAAKe,KAAL,CAAWrB,gBAAX,CAA4BmC,MAA/C;AACH,OAFD,MAGK,IAAI,KAAKd,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,aAAKZ,OAAL,CAAaJ,GAAb,GAAmB,KAAKe,KAAL,CAAWvB,cAAX,CAA0BqC,MAA7C;AACH,OAFI,MAGA,IAAI,KAAKd,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,aAAKZ,OAAL,CAAaJ,GAAb,GAAmB,KAAKe,KAAL,CAAWnB,kBAAX,CAA8BiC,MAAjD;AACH;;AAED,UAAIZ,MAAM,CAACC,OAAP,CAAe,sBAAsB,KAAKd,OAAL,CAAaC,KAAnC,GAA2C,GAA3C,GAAiD,KAAKD,OAAL,CAAaE,IAA7E,CAAJ,EAAwF;AACpFW,QAAAA,MAAM,CAACM,KAAP,CAAa,qBAAb;AACH;;AAED,UAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,aAAKD,KAAL,CAAW9B,eAAX,CAA2B,KAAKmB,OAAhC;AACH,OAFD,MAGK,IAAI,KAAKW,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,aAAKD,KAAL,CAAW/B,aAAX,CAAyB,KAAKoB,OAA9B;AACH,OAFI,MAGA,IAAI,KAAKW,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,aAAKD,KAAL,CAAW7B,iBAAX,CAA6B,KAAKkB,OAAlC;AACH;;AAED,WAAKA,OAAL,GAAe;AACXJ,QAAAA,GAAG,EAAE,EADM;AAEXK,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,IAAI,EAAE;AAHK,OAAf;AAMA,WAAKI,QAAL,CAAc;AACVC,QAAAA,cAAc,EAAE,IADN;AAEVE,QAAAA,aAAa,EAAE;AAFL,OAAd;AAKA,WAAKE,KAAL,CAAWK,mBAAX,CAA+B,EAA/B;AACA,WAAKL,KAAL,CAAWM,oBAAX,CAAgC,EAAhC;AACA,WAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAhC;AACH,KA1Ha;;AAAA,SA4HdQ,gBA5Hc,GA4HK,MAAM;AACrB,UAAI,KAAKvC,KAAL,CAAWsB,aAAX,KAA6B,IAA7B,IAAqC,KAAKtB,KAAL,CAAWoB,cAAX,KAA8B,IAAvE,EAA6E;AACzE,eAAOM,MAAM,CAACM,KAAP,CAAa,qCAAb,CAAP;AACH;;AAED,UAAI,KAAKR,KAAL,CAAWI,iBAAX,KAAiC,EAArC,EAAyC;AACrC,eAAOF,MAAM,CAACM,KAAP,CAAa,iDAAb,CAAP;AACH;;AAED,UAAI,KAAKnB,OAAL,CAAaC,KAAb,CAAmBuB,QAAnB,CAA4B,GAA5B,CAAJ,EAAsC;AAClC,eAAOX,MAAM,CAACM,KAAP,CAAa,oCAAb,CAAP;AACH;;AAED,UAAI,KAAKC,YAAL,CAAkB,KAAKpB,OAAL,CAAaC,KAA/B,KAAyC,KAAKU,KAAL,CAAWC,gBAAX,KAAgC,CAA7E,EAAgF;AAC5E,eAAOC,MAAM,CAACM,KAAP,CAAa,kCAAb,CAAP;AACH;;AAED,UAAI,KAAKR,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IAAqC,KAAKQ,YAAL,CAAkB,KAAKpB,OAAL,CAAaE,IAA/B,CAAzC,EAA+E;AAC3E,eAAOW,MAAM,CAACM,KAAP,CAAa,mCAAb,CAAP;AACH;;AAED,WAAKnB,OAAL,CAAaJ,GAAb,GAAmB,KAAKe,KAAL,CAAWI,iBAA9B;;AAEA,UAAI,KAAKJ,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,YAAIC,MAAM,CAACC,OAAP,CAAe,uBAAuB,KAAKH,KAAL,CAAWrB,gBAAX,CAA4B,KAAKqB,KAAL,CAAWI,iBAAvC,EAA0Dd,KAAjF,GAAyF,GAAzF,GAA+F,KAAKU,KAAL,CAAWrB,gBAAX,CAA4B,KAAKqB,KAAL,CAAWI,iBAAvC,EAA0Db,IAAzJ,GAAgK,MAAhK,GAAyK,KAAKF,OAAL,CAAaC,KAAtL,GAA8L,GAA9L,GAAoM,KAAKD,OAAL,CAAaE,IAAhO,CAAJ,EAA2O;AACvOW,UAAAA,MAAM,CAACM,KAAP,CAAa,sBAAb;AACH;;AACD,aAAKR,KAAL,CAAW3B,gBAAX,CAA4B,KAAKgB,OAAjC;AACH,OALD,MAOK,IAAI,KAAKW,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,YAAIC,MAAM,CAACC,OAAP,CAAe,uBAAuB,KAAKH,KAAL,CAAWvB,cAAX,CAA0B,KAAKuB,KAAL,CAAWI,iBAArC,EAAwDd,KAA/E,GAAuF,GAAvF,GAA6F,KAAKU,KAAL,CAAWvB,cAAX,CAA0B,KAAKuB,KAAL,CAAWI,iBAArC,EAAwDb,IAArJ,GAA4J,MAA5J,GAAqK,KAAKF,OAAL,CAAaC,KAAlL,GAA0L,GAA1L,GAAgM,KAAKD,OAAL,CAAaE,IAA5N,CAAJ,EAAuO;AACnOW,UAAAA,MAAM,CAACM,KAAP,CAAa,sBAAb;AACH;;AACD,aAAKR,KAAL,CAAW1B,cAAX,CAA0B,KAAKe,OAA/B;AACH,OALI,MAMA,IAAI,KAAKW,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,YAAIC,MAAM,CAACC,OAAP,CAAe,uBAAuB,KAAKH,KAAL,CAAWnB,kBAAX,CAA8B,KAAKmB,KAAL,CAAWI,iBAAzC,EAA4Dd,KAAnF,GAA2F,GAA3F,GAAiG,KAAKU,KAAL,CAAWnB,kBAAX,CAA8B,KAAKmB,KAAL,CAAWI,iBAAzC,EAA4Db,IAA7J,GAAoK,MAApK,GAA6K,KAAKF,OAAL,CAAaC,KAA1L,GAAkM,GAAlM,GAAwM,KAAKD,OAAL,CAAaE,IAApO,CAAJ,EAA+O;AAC3OW,UAAAA,MAAM,CAACM,KAAP,CAAa,sBAAb;AACH;;AACD,aAAKR,KAAL,CAAW5B,kBAAX,CAA8B,KAAKiB,OAAnC;AACH;;AAED,WAAKA,OAAL,GAAe;AACXJ,QAAAA,GAAG,EAAE,EADM;AAEXK,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,IAAI,EAAE;AAHK,OAAf;AAMA,WAAKI,QAAL,CAAc;AACVC,QAAAA,cAAc,EAAE,IADN;AAEVE,QAAAA,aAAa,EAAE;AAFL,OAAd;AAKA,WAAKE,KAAL,CAAWK,mBAAX,CAA+B,EAA/B;AACA,WAAKL,KAAL,CAAWM,oBAAX,CAAgC,EAAhC;AACA,WAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAhC;AACH,KArLa;;AAAA,SAuLdS,UAvLc,GAuLD,CAACC,IAAD,EAAOP,MAAP,EAAeQ,eAAf,KAAmC;AAC5C,UAAID,IAAI,KAAK,IAAb,EAAmB;AACf,eAAO;AAAO,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,QAAQ,EAAE;AAA3B,WAAd;AAAmD,UAAA,EAAE,EAAC,KAAtD;AAA4D,UAAA,KAAK,EAAEV,MAAnE;AAA2E,UAAA,IAAI,EAAC,MAAhF;AAAuF,UAAA,QAAQ,EAAEQ,eAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFD,MAGK;AACD,eAAO;AAAO,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,QAAQ,EAAE;AAA3B,WAAd;AAAmD,UAAA,EAAE,EAAC,KAAtD;AAA4D,UAAA,IAAI,EAAC,MAAjE;AAAwE,UAAA,QAAQ,EAAEF,eAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KA9La;;AAAA,SAgMdG,oBAhMc,GAgMS,MAAM;AACzB,UAAI,KAAKrB,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,eAAO,YAAP;AACH,OAFD,MAGK,IAAI,KAAKD,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,eAAO,UAAP;AACH,OAFI,MAGA;AACD,eAAO,cAAP;AACH;AACJ,KA1Ma;;AAAA,SA4MdqB,mBA5Mc,GA4MQ,MAAM;AACxB,UAAI,KAAKtB,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACnC,eAAO,QAAP;AACH,OAFD,MAGK,IAAI,KAAKD,KAAL,CAAWC,gBAAX,KAAgC,CAApC,EAAuC;AACxC,eAAO,MAAP;AACH,OAFI,MAGA;AACD,eAAO,UAAP;AACH;AACJ,KAtNa;;AAEV,SAAKzB,KAAL,GAAa;AACToB,MAAAA,cAAc,EAAE,IADP;AAETE,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAkNDyB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKvB,KAAL,CAAWC,gBAAX,KAAgC,CAAhC,IAAqC,KAAKD,KAAL,CAAWC,gBAAX,KAAgC,CAArE,IAA0E,KAAKD,KAAL,CAAWC,gBAAX,KAAgC,CAA9G,EAAiH;AAC7G,UAAI,KAAKD,KAAL,CAAWwB,iBAAX,KAAiC,CAArC,EAAwC;AACpC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKR,UAAL,CAAgB,KAAKxC,KAAL,CAAWoB,cAA3B,EAA2C,KAAKyB,oBAAL,EAA3C,EAAwE,KAAK7B,iBAA7E,CADL,EAEK,KAAKwB,UAAL,CAAgB,KAAKxC,KAAL,CAAWsB,aAA3B,EAA0C,KAAKwB,mBAAL,EAA1C,EAAsE,KAAKzB,gBAA3E,CAFL,EAGI,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,OAAb;AACI,UAAA,OAAO,EAAC,UADZ;AAEI,UAAA,KAAK,EAAE;AAAEsB,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,QAAQ,EAAE;AAA3B,WAFX;AAGI,UAAA,OAAO,EAAE,MAAM;AAAE,iBAAKR,eAAL;AAAwB,WAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CADJ;AAYH,OAbD,MAcK,IAAI,KAAKZ,KAAL,CAAWwB,iBAAX,KAAiC,CAArC,EAAwC;AACzC,YAAI,KAAKxB,KAAL,CAAWI,iBAAX,KAAiC,EAArC,EAAyC;AACrC,iBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKY,UAAL,CAAgB,KAAKxC,KAAL,CAAWoB,cAA3B,EAA2C,KAAKyB,oBAAL,EAA3C,EAAwE,KAAK7B,iBAA7E,CADL,EAEK,KAAKwB,UAAL,CAAgB,KAAKxC,KAAL,CAAWsB,aAA3B,EAA0C,KAAKwB,mBAAL,EAA1C,EAAsE,KAAKzB,gBAA3E,CAFL,EAGI,oBAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AACI,YAAA,OAAO,EAAC,UADZ;AAEI,YAAA,KAAK,EAAE;AAAEsB,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,QAAQ,EAAE;AAA3B,aAFX;AAGI,YAAA,OAAO,EAAE,MAAM;AAAE,mBAAKL,gBAAL;AAAyB,aAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,yBADJ;AAWH,SAZD,MAYO;AACH,iBAAO,IAAP;AACH;AACJ,OAhBI,MAiBA,IAAI,KAAKf,KAAL,CAAWwB,iBAAX,KAAiC,CAArC,EAAwC;AACzC,YAAI,KAAKxB,KAAL,CAAWI,iBAAX,KAAiC,EAArC,EAAyC;AACrC,iBACI,oBAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AACI,YAAA,OAAO,EAAC,UADZ;AAEI,YAAA,KAAK,EAAE;AAAEe,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,QAAQ,EAAE;AAA3B,aAFX;AAGI,YAAA,OAAO,EAAE,MAAM;AAAE,mBAAKrB,kBAAL;AAA2B,aAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ;AAQH,SATD,MAUK;AACD,iBAAO,IAAP;AACH;AACJ,OAdI,MAeA;AACD,eAAO,IAAP;AACH;AACJ,KAlDD,MAkDO;AACH,aAAO,IAAP;AACH;AACJ;;AAhRiC;;AAmRtC,eAAelC,OAAO,CAACU,eAAD,EAAiBQ,kBAAjB,CAAP,CAA4CI,aAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport {\n    removeTypeSelect,\n    removeMarketSelect,\n    removeLanguageSelect,\n    addTypeSelect,\n    addMarketSelect,\n    addLanguageSelect,\n    editLanguageSelect,\n    editMarketSelect,\n    editTypeSelect\n} from '../../actions'\n\nconst mapStateToProps = state => {\n    return {\n        typeOptionsVar: state.typeOptionsData.typeOptionsVar,\n        marketOptionsVar: state.marketOptionsData.marketOptionsVar,\n        languageOptionsVar: state.languageOptionsData.languageOptionsVar\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeTypeSelect: (key) => dispatch(removeTypeSelect(key)),\n        removeMarketSelect: (key) => dispatch(removeMarketSelect(key)),\n        removeLanguageSelect: (key) => dispatch(removeLanguageSelect(key)),\n        addTypeSelect: (option) => dispatch(addTypeSelect(option)),\n        addMarketSelect: (option) => dispatch(addMarketSelect(option)),\n        addLanguageSelect: (option) => dispatch(addLanguageSelect(option)),\n        editTypeSelect: (option) => dispatch(editTypeSelect(option)),\n        editMarketSelect: (option) => dispatch(editMarketSelect(option)),\n        editLanguageSelect: (option) => dispatch(editLanguageSelect(option))\n    }\n}\n\nclass ActionButtons extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            resetValueBool: true,\n            resetTextBool: true,\n        }\n    }\n\n    newData = {\n        key: '',\n        value: '',\n        text: ''\n    }\n\n\n    handleValueChange = (event) => {\n        this.newData.value = event.target.value;\n        this.setState({\n            resetValueBool: false\n        })\n    }\n\n    handleTextChange = (event) => {\n        this.newData.text = event.target.value;\n        this.setState({\n            resetTextBool: false\n        })\n    }\n\n    handleDeleteSubmit = () => {\n        if (this.props.selectedFieldRow === 0) {\n            if (window.confirm('Are you sure you want to delete ' + this.props.marketOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.marketOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n                this.props.removeMarketSelect(this.props.selectedEditorRow)\n                this.props.setFieldRowSelected('');\n                this.props.setActionRowSelected('');\n                this.props.setEditorRowSelected('');\n                window.alert('Successfully deleted!');\n            }\n        }\n        else if (this.props.selectedFieldRow === 1) {\n            if (window.confirm('Are you sure you want to delete ' + this.props.typeOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.typeOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n                this.props.removeTypeSelect(this.props.selectedEditorRow)\n                this.props.setFieldRowSelected('');\n                this.props.setActionRowSelected('');\n                this.props.setEditorRowSelected('');\n                window.alert('Successfully deleted!');\n            }\n        }\n        else if (this.props.selectedFieldRow === 2) {\n            if (window.confirm('Are you sure you want to delete ' + this.props.languageOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.languageOptionsVar[this.props.selectedEditorRow].text + ' ?')) {\n                this.props.removeLanguageSelect(this.props.selectedEditorRow)\n                this.props.setFieldRowSelected('');\n                this.props.setActionRowSelected('');\n                this.props.setEditorRowSelected('');\n                window.alert('Successfully deleted!');\n            }\n        }\n        else {\n            window.alert('Select all necessary fields!')\n        }\n    }\n\n    hasLowerCase = (string) => {\n        return (/[a-z]/.test(string))\n    }\n\n    handleAddSubmit = () => {\n\n        if (this.state.resetTextBool === true || this.state.resetValueBool === true) {\n            return window.alert('Please fill in all required fields.')\n        }\n\n        if (this.newData.value.includes(' ')) {\n            return window.alert('Please remove spaces from your key')\n        }\n\n        if (this.hasLowerCase(this.newData.value)) {\n            return window.alert('Please format the key as ALLCAPS')\n        }\n\n        if (this.props.selectedFieldRow === 1 && this.hasLowerCase(this.newData.text)) {\n            return window.alert('Please format the type as ALLCAPS')\n        }\n\n        if (this.props.selectedFieldRow === 0) {\n            this.newData.key = this.props.marketOptionsVar.length\n        }\n        else if (this.props.selectedFieldRow === 1) {\n            this.newData.key = this.props.typeOptionsVar.length\n        }\n        else if (this.props.selectedFieldRow === 2) {\n            this.newData.key = this.props.languageOptionsVar.length\n        }\n\n        if (window.confirm('Press OK to Add: ' + this.newData.value + ' ' + this.newData.text)) {\n            window.alert('Successfully added!')\n        }\n\n        if (this.props.selectedFieldRow === 0) {\n            this.props.addMarketSelect(this.newData)\n        }\n        else if (this.props.selectedFieldRow === 1) {\n            this.props.addTypeSelect(this.newData)\n        }\n        else if (this.props.selectedFieldRow === 2) {\n            this.props.addLanguageSelect(this.newData)\n        }\n\n        this.newData = {\n            key: '',\n            value: '',\n            text: ''\n        }\n\n        this.setState({\n            resetValueBool: true,\n            resetTextBool: true\n        }\n        )\n        this.props.setFieldRowSelected('');\n        this.props.setActionRowSelected('');\n        this.props.setEditorRowSelected('');\n    }\n\n    handleEditSubmit = () => {\n        if (this.state.resetTextBool === true || this.state.resetValueBool === true) {\n            return window.alert('Please fill in all required fields.')\n        }\n\n        if (this.props.selectedEditorRow === '') {\n            return window.alert('Please select the option you would like to edit')\n        }\n\n        if (this.newData.value.includes(' ')) {\n            return window.alert('Please remove spaces from your key')\n        }\n\n        if (this.hasLowerCase(this.newData.value) && this.props.selectedFieldRow !== 2) {\n            return window.alert('Please format the key as ALLCAPS')\n        }\n\n        if (this.props.selectedFieldRow === 1 && this.hasLowerCase(this.newData.text)) {\n            return window.alert('Please format the type as ALLCAPS')\n        }\n\n        this.newData.key = this.props.selectedEditorRow\n\n        if (this.props.selectedFieldRow === 0) {\n            if (window.confirm('Press OK to Edit: ' + this.props.marketOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.marketOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n                window.alert('Successfully edited!')\n            }\n            this.props.editMarketSelect(this.newData)\n        }\n\n        else if (this.props.selectedFieldRow === 1) {\n            if (window.confirm('Press OK to Edit: ' + this.props.typeOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.typeOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n                window.alert('Successfully edited!')\n            }\n            this.props.editTypeSelect(this.newData)\n        }\n        else if (this.props.selectedFieldRow === 2) {\n            if (window.confirm('Press OK to Edit: ' + this.props.languageOptionsVar[this.props.selectedEditorRow].value + ' ' + this.props.languageOptionsVar[this.props.selectedEditorRow].text + ' as ' + this.newData.value + ' ' + this.newData.text)) {\n                window.alert('Successfully edited!')\n            }\n            this.props.editLanguageSelect(this.newData)\n        }\n\n        this.newData = {\n            key: '',\n            value: '',\n            text: ''\n        }\n\n        this.setState({\n            resetValueBool: true,\n            resetTextBool: true\n        }\n        )\n        this.props.setFieldRowSelected('');\n        this.props.setActionRowSelected('');\n        this.props.setEditorRowSelected('');\n    }\n\n    resetInput = (bool, string, onClickFunction) => {\n        if (bool === true) {\n            return <input style={{ width: \"100%\", fontSize: '2rem' }} id='txt' value={string} type='text' onChange={onClickFunction}></input>\n        }\n        else {\n            return <input style={{ width: \"100%\", fontSize: '2rem' }} id='txt' type='text' onChange={onClickFunction}></input>\n        }\n    }\n\n    determineValuePrompt = () => {\n        if (this.props.selectedFieldRow === 0) {\n            return 'Market Key'\n        }\n        else if (this.props.selectedFieldRow === 1) {\n            return 'Type Key'\n        }\n        else {\n            return 'Language Key'\n        }\n    }\n\n    determineTextPrompt = () => {\n        if (this.props.selectedFieldRow === 0) {\n            return 'Market'\n        }\n        else if (this.props.selectedFieldRow === 1) {\n            return 'Type'\n        }\n        else {\n            return 'Language'\n        }\n    }\n\n    render() {\n        if (this.props.selectedFieldRow === 0 || this.props.selectedFieldRow === 1 || this.props.selectedFieldRow === 2) {\n            if (this.props.selectedActionRow === 0) {\n                return (\n                    <div>\n                        {this.resetInput(this.state.resetValueBool, this.determineValuePrompt(), this.handleValueChange)}\n                        {this.resetInput(this.state.resetTextBool, this.determineTextPrompt(), this.handleTextChange)}\n                        <Button size='small'\n                            variant=\"outlined\"\n                            style={{ width: '100%', fontSize: '2rem' }}\n                            onClick={() => { this.handleAddSubmit() }}>\n                            Submit\n                        </Button>\n                    </div>\n                )\n            }\n            else if (this.props.selectedActionRow === 1) {\n                if (this.props.selectedEditorRow !== '') {\n                    return (\n                        <div>\n                            {this.resetInput(this.state.resetValueBool, this.determineValuePrompt(), this.handleValueChange)}\n                            {this.resetInput(this.state.resetTextBool, this.determineTextPrompt(), this.handleTextChange)}\n                            <Button size='small'\n                                variant=\"outlined\"\n                                style={{ width: '100%', fontSize: '2rem' }}\n                                onClick={() => { this.handleEditSubmit() }}>\n                                Submit\n                    </Button>                    </div>\n                    )\n                } else {\n                    return null;\n                }\n            }\n            else if (this.props.selectedActionRow === 2) {\n                if (this.props.selectedEditorRow !== '') {\n                    return (\n                        <Button size='small'\n                            variant=\"outlined\"\n                            style={{ width: '100%', fontSize: '2rem' }}\n                            onClick={() => { this.handleDeleteSubmit() }}>\n                            Delete\n                    </Button>\n                    )\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ActionButtons)"]},"metadata":{},"sourceType":"module"}