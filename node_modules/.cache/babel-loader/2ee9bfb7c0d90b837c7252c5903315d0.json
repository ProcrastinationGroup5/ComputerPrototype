{"ast":null,"code":"var _jsxFileName = \"/Users/vishaldhileepan/Desktop/CS330/ComputerPrototype/src/Visualisation/Visualisation.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Circle } from 'react-shapes';\nimport { displayTaskInfoFlip, displayANTBoolFlip, setTaskSelected, displayCalBoolFlip } from '../actions';\nimport Button from '@material-ui/core/Button';\nimport NoTasks from './NoTasks';\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.editTasks.tasksVar,\n    tasksLength: state.editTasks.tasksLength\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    displayTaskInfoFlip: bool => dispatch(displayTaskInfoFlip(bool)),\n    displayANTBoolFlip: bool => dispatch(displayANTBoolFlip(bool)),\n    displayCalBoolFlip: bool => dispatch(displayCalBoolFlip(bool)),\n    setTaskSelected: int => dispatch(setTaskSelected(int))\n  };\n};\n\nclass Visualisation extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.taskNameClicked = i => {\n      this.props.displayANTBoolFlip(false);\n      this.props.displayTaskInfoFlip(true);\n      this.props.displayCalBoolFlip(false);\n      this.props.setTaskSelected(i);\n    };\n\n    this.circleColor = i => {\n      if (this.props.tasks[i].difficulty == 'Easy') {\n        return '#fca503';\n      } else if (this.props.tasks[i].difficulty == 'Medium') {\n        return '#2409ba';\n      } else {\n        return '#fc0303';\n      }\n    };\n\n    this.displayTasks = tasksList => {\n      if (tasksList.length === 0) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(NoTasks, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n      } else {\n        return tasksList;\n      }\n    };\n  }\n\n  render() {\n    function getRandomArbitrary(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    const tasksList = [];\n\n    for (let i = 0; i < this.props.tasksLength; i++) {\n      let leftMargin = getRandomArbitrary(20, 50) + '%';\n      console.log(leftMargin);\n      tasksList.push(React.createElement(\"div\", {\n        style: {\n          marginLeft: leftMargin\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"taskNameButton\",\n        onClick: () => {\n          this.taskNameClicked(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.props.tasks[i].name), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Circle, {\n        r: this.props.tasks[i].numberSubtasks * 60,\n        fill: {\n          color: this.circleColor(i)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.displayTasks(tasksList));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Visualisation);","map":{"version":3,"sources":["/Users/vishaldhileepan/Desktop/CS330/ComputerPrototype/src/Visualisation/Visualisation.js"],"names":["React","Component","connect","Circle","displayTaskInfoFlip","displayANTBoolFlip","setTaskSelected","displayCalBoolFlip","Button","NoTasks","mapStateToProps","state","tasks","editTasks","tasksVar","tasksLength","mapDispatchToProps","dispatch","bool","int","Visualisation","taskNameClicked","i","props","circleColor","difficulty","displayTasks","tasksList","length","render","getRandomArbitrary","min","max","Math","random","leftMargin","console","log","push","marginLeft","name","numberSubtasks","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SACIC,mBADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,kBAJJ,QAKO,YALP;AAMA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,KAAK,EAAED,KAAK,CAACE,SAAN,CAAgBC,QADpB;AAEHC,IAAAA,WAAW,EAAEJ,KAAK,CAACE,SAAN,CAAgBE;AAF1B,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHb,IAAAA,mBAAmB,EAAGc,IAAD,IAAUD,QAAQ,CAACb,mBAAmB,CAACc,IAAD,CAApB,CADpC;AAEHb,IAAAA,kBAAkB,EAAGa,IAAD,IAAUD,QAAQ,CAACZ,kBAAkB,CAACa,IAAD,CAAnB,CAFnC;AAGHX,IAAAA,kBAAkB,EAAGW,IAAD,IAAUD,QAAQ,CAACV,kBAAkB,CAACW,IAAD,CAAnB,CAHnC;AAIHZ,IAAAA,eAAe,EAAGa,GAAD,IAASF,QAAQ,CAACX,eAAe,CAACa,GAAD,CAAhB;AAJ/B,GAAP;AAMH,CAPD;;AASA,MAAMC,aAAN,SAA4BnB,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAElCoB,eAFkC,GAEfC,CAAD,IAAO;AACrB,WAAKC,KAAL,CAAWlB,kBAAX,CAA8B,KAA9B;AACA,WAAKkB,KAAL,CAAWnB,mBAAX,CAA+B,IAA/B;AACA,WAAKmB,KAAL,CAAWhB,kBAAX,CAA8B,KAA9B;AACA,WAAKgB,KAAL,CAAWjB,eAAX,CAA2BgB,CAA3B;AACH,KAPiC;;AAAA,SASlCE,WATkC,GASnBF,CAAD,IAAO;AACjB,UAAI,KAAKC,KAAL,CAAWX,KAAX,CAAiBU,CAAjB,EAAoBG,UAApB,IAAkC,MAAtC,EAA8C;AAC1C,eAAO,SAAP;AACH,OAFD,MAGK,IAAI,KAAKF,KAAL,CAAWX,KAAX,CAAiBU,CAAjB,EAAoBG,UAApB,IAAkC,QAAtC,EAAgD;AACjD,eAAO,SAAP;AACH,OAFI,MAGA;AACD,eAAO,SAAP;AACH;AACJ,KAnBiC;;AAAA,SAqBlCC,YArBkC,GAqBlBC,SAAD,IAAe;AAC1B,UAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAL,CAAR;AACH,OAFD,MAGK;AACD,eAAOD,SAAP;AACH;AACJ,KA5BiC;AAAA;;AA8BlCE,EAAAA,MAAM,GAAG;AAEL,aAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AAClC,aAAOC,IAAI,CAACC,MAAL,MAAiBF,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AACH;;AAED,UAAMJ,SAAS,GAAG,EAAlB;;AAEA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWR,WAA/B,EAA4CO,CAAC,EAA7C,EAAiD;AAC7C,UAAIa,UAAU,GAAGL,kBAAkB,CAAC,EAAD,EAAI,EAAJ,CAAlB,GAA0B,GAA3C;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAR,MAAAA,SAAS,CAACW,IAAV,CACI;AAAK,QAAA,KAAK,EAAI;AAACC,UAAAA,UAAU,EAAEJ;AAAb,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,OAAO,EAAE,MAAM;AAAE,eAAKd,eAAL,CAAqBC,CAArB;AAAyB,SAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgF,KAAKC,KAAL,CAAWX,KAAX,CAAiBU,CAAjB,EAAoBkB,IAApG,CADJ,EACsH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADtH,EAEI,oBAAC,MAAD;AAAQ,QAAA,CAAC,EAAE,KAAKjB,KAAL,CAAWX,KAAX,CAAiBU,CAAjB,EAAoBmB,cAApB,GAAqC,EAAhD;AAAoD,QAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAKlB,WAAL,CAAiBF,CAAjB;AAAT,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAEgG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFhG,CADJ;AAMH;;AAED,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKI,YAAL,CAAkBC,SAAlB,CADL,CADJ;AAKH;;AAtDiC;;AAyDtC,eAAezB,OAAO,CAACQ,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CI,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Circle } from 'react-shapes';\nimport {\n    displayTaskInfoFlip,\n    displayANTBoolFlip,\n    setTaskSelected,\n    displayCalBoolFlip\n} from '../actions'\nimport Button from '@material-ui/core/Button';\nimport NoTasks from './NoTasks'\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.editTasks.tasksVar,\n        tasksLength: state.editTasks.tasksLength\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        displayTaskInfoFlip: (bool) => dispatch(displayTaskInfoFlip(bool)),\n        displayANTBoolFlip: (bool) => dispatch(displayANTBoolFlip(bool)),\n        displayCalBoolFlip: (bool) => dispatch(displayCalBoolFlip(bool)),\n        setTaskSelected: (int) => dispatch(setTaskSelected(int))\n    }\n}\n\nclass Visualisation extends Component {\n\n    taskNameClicked = (i) => {\n        this.props.displayANTBoolFlip(false)\n        this.props.displayTaskInfoFlip(true)\n        this.props.displayCalBoolFlip(false)\n        this.props.setTaskSelected(i)\n    }\n\n    circleColor = (i) => {\n        if (this.props.tasks[i].difficulty == 'Easy') {\n            return '#fca503'\n        }\n        else if (this.props.tasks[i].difficulty == 'Medium') {\n            return '#2409ba'\n        }\n        else {\n            return '#fc0303'\n        }\n    }\n\n    displayTasks = (tasksList) => {\n        if (tasksList.length === 0) {\n            return (<div><NoTasks /></div>)\n        }\n        else {\n            return tasksList\n        }\n    }\n\n    render() {\n\n        function getRandomArbitrary(min, max) {\n            return Math.random() * (max - min) + min;\n        }\n\n        const tasksList = [];\n\n        for (let i = 0; i < this.props.tasksLength; i++) {\n            let leftMargin = getRandomArbitrary(20,50)+'%'\n            console.log(leftMargin)\n            tasksList.push(\n                <div style = {{marginLeft: leftMargin}}>\n                    <Button className='taskNameButton' onClick={() => { this.taskNameClicked(i) }}>{this.props.tasks[i].name}</Button><br />\n                    <Circle r={this.props.tasks[i].numberSubtasks * 60} fill={{ color: this.circleColor(i) }} /><br />\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {this.displayTasks(tasksList)}\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Visualisation)"]},"metadata":{},"sourceType":"module"}